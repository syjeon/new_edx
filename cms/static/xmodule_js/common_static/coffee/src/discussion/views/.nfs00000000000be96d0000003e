// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.ResponseCommentView = (function(_super) {
      __extends(ResponseCommentView, _super);

      function ResponseCommentView() {
        _ref = ResponseCommentView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      ResponseCommentView.prototype.tagName = "li";

      ResponseCommentView.prototype.$ = function(selector) {
        return this.$el.find(selector);
      };

      ResponseCommentView.prototype.initialize = function() {
        ResponseCommentView.__super__.initialize.call(this);
        return this.createShowView();
      };

      ResponseCommentView.prototype.render = function() {
        this.renderShowView();
        return this;
      };

      ResponseCommentView.prototype.createShowView = function() {
        if (this.editView != null) {
          this.editView.undelegateEvents();
          this.editView.$el.empty();
          this.editView = null;
        }
        return this.showView = new ResponseCommentShowView({
          model: this.model
        });
      };

      ResponseCommentView.prototype.renderSubView = function(view) {
        view.setElement(this.$el);
        view.render();
        return view.delegateEvents();
      };

      ResponseCommentView.prototype.renderShowView = function() {
        return this.renderSubView(this.showView);
      };

      return ResponseCommentView;

    })(DiscussionContentView);
  }

}).call(this);
