// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    if (!window.$$contents) {
      window.$$contents = {};
    }
    return $.fn.extend({
      loading: function() {
        this.$_loading = $("<div class='loading-animation'></div>");
        return $(this).after(this.$_loading);
      },
      loaded: function() {
        return this.$_loading.remove();
      }
    });
  });

  this.DiscussionUtil = (function() {
    function DiscussionUtil() {}

    DiscussionUtil.wmdEditors = {};

    DiscussionUtil.getTemplate = function(id) {
      return $("script#" + id).html();
    };

    DiscussionUtil.loadRoles = function(roles) {
      return this.roleIds = roles;
    };

    DiscussionUtil.loadFlagModerator = function(what) {
      return this.isFlagModerator = (what === "True") || (what === 1);
    };

    DiscussionUtil.loadRolesFromContainer = function() {
      this.loadRoles($("#discussion-container").data("roles"));
      return this.loadFlagModerator($("#discussion-container").data("flag-moderator"));
    };

    DiscussionUtil.isStaff = function(user_id) {
      var staff;
      staff = _.union(this.roleIds['Staff'], this.roleIds['Moderator'], this.roleIds['Administrator']);
      return _.include(staff, parseInt(user_id));
    };

    DiscussionUtil.isTA = function(user_id) {
      var ta;
      ta = _.union(this.roleIds['Community TA']);
      return _.include(ta, parseInt(user_id));
    };

    DiscussionUtil.bulkUpdateContentInfo = function(infos) {
      var id, info, _results;
      _results = [];
      for (id in infos) {
        info = infos[id];
        _results.push(Content.getContent(id).updateInfo(info));
      }
      return _results;
    };

    DiscussionUtil.generateDiscussionLink = function(cls, txt, handler) {
      return $("<a>").addClass("discussion-link").attr("href", "javascript:void(0)").addClass(cls).html(txt).click(function() {
        return handler(this);
      });
    };

    DiscussionUtil.urlFor = function(name, param, param1, param2) {
      return {
        follow_discussion: "/courses/" + $$course_id + "/discussion/" + param + "/follow",
        unfollow_discussion: "/courses/" + $$course_id + "/discussion/" + param + "/unfollow",
        create_thread: "/courses/" + $$course_id + "/discussion/" + param + "/threads/create",
        search_similar_threads: "/courses/" + $$course_id + "/discussion/" + param + "/threads/search_similar",
        update_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/update",
        create_comment: "/courses/" + $$course_id + "/discussion/threads/" + param + "/reply",
        delete_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/delete",
        flagAbuse_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/flagAbuse",
        unFlagAbuse_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/unFlagAbuse",
        flagAbuse_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/flagAbuse",
        unFlagAbuse_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/unFlagAbuse",
        upvote_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/upvote",
        downvote_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/downvote",
        pin_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/pin",
        un_pin_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/unpin",
        undo_vote_for_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/unvote",
        follow_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/follow",
        unfollow_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/unfollow",
        update_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/update",
        endorse_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/endorse",
        create_sub_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/reply",
        delete_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/delete",
        upvote_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/upvote",
        downvote_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/downvote",
        undo_vote_for_comment: "/courses/" + $$course_id + "/discussion/comments/" + param + "/unvote",
        upload: "/courses/" + $$course_id + "/discussion/upload",
        search: "/courses/" + $$course_id + "/discussion/forum/search",
        tags_autocomplete: "/courses/" + $$course_id + "/discussion/threads/tags/autocomplete",
        retrieve_discussion: "/courses/" + $$course_id + "/discussion/forum/" + param + "/inline",
        retrieve_single_thread: "/courses/" + $$course_id + "/discussion/forum/" + param + "/threads/" + param1,
        update_moderator_status: "/courses/" + $$course_id + "/discussion/users/" + param + "/update_moderator_status",
        openclose_thread: "/courses/" + $$course_id + "/discussion/threads/" + param + "/close",
        permanent_link_thread: "/courses/" + $$course_id + "/discussion/forum/" + param + "/threads/" + param1,
        permanent_link_comment: "/courses/" + $$course_id + "/discussion/forum/" + param + "/threads/" + param1 + "#" + param2,
        user_profile: "/courses/" + $$course_id + "/discussion/forum/users/" + param,
        followed_threads: "/courses/" + $$course_id + "/discussion/forum/users/" + param + "/followed",
        threads: "/courses/" + $$course_id + "/discussion/forum",
        "enable_notifications": "/notification_prefs/enable/",
        "disable_notifications": "/notification_prefs/disable/",
        "notifications_status": "/notification_prefs/status"
      }[name];
    };

    DiscussionUtil.safeAjax = function(params) {
      var $elem, request;
      $elem = params.$elem;
      if ($elem && $elem.attr("disabled")) {
        return;
      }
      params["url"] = URI(params["url"]).addSearch({
        ajax: 1
      });
      params["beforeSend"] = function() {
        if ($elem) {
          $elem.attr("disabled", "disabled");
        }
        if (params["$loading"]) {
          if (params["loadingCallback"] != null) {
            return params["loadingCallback"].apply(params["$loading"]);
          } else {
            return params["$loading"].loading();
          }
        }
      };
      request = $.ajax(params).always(function() {
        if ($elem) {
          $elem.removeAttr("disabled");
        }
        if (params["$loading"]) {
          if (params["loadedCallback"] != null) {
            return params["loadedCallback"].apply(params["$loading"]);
          } else {
            return params["$loading"].loaded();
          }
        }
      });
      return request;
    };

    DiscussionUtil.get = function($elem, url, data, success) {
      return this.safeAjax({
        $elem: $elem,
        url: url,
        type: "GET",
        dataType: "json",
        data: data,
        success: success
      });
    };

    DiscussionUtil.post = function($elem, url, data, success) {
      return this.safeAjax({
        $elem: $elem,
        url: url,
        type: "POST",
        dataType: "json",
        data: data,
        success: success
      });
    };

    DiscussionUtil.bindLocalEvents = function($local, eventsHandler) {
      var event, eventSelector, handler, selector, _ref, _results;
      _results = [];
      for (eventSelector in eventsHandler) {
        handler = eventsHandler[eventSelector];
        _ref = eventSelector.split(' '), event = _ref[0], selector = _ref[1];
        _results.push($local(selector).unbind(event)[event](handler));
      }
      return _results;
    };

    DiscussionUtil.processTag = function(text) {
      return text.toLowerCase();
    };

    DiscussionUtil.tagsInputOptions = function() {
      return {
        autocomplete_url: this.urlFor('tags_autocomplete'),
        autocomplete: {
          remoteDataType: 'json'
        },
        interactive: true,
        height: '30px',
        width: '100%',
        defaultText: "Tag your post: press enter after each tag",
        removeWithBackspace: true,
        preprocessTag: this.processTag
      };
    };

    DiscussionUtil.formErrorHandler = function(errorsField) {
      return function(xhr, textStatus, error) {
        var response, _i, _len, _ref, _results;
        response = JSON.parse(xhr.responseText);
        if ((response.errors != null) && response.errors.length > 0) {
          errorsField.empty();
          _ref = response.errors;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            error = _ref[_i];
            _results.push(errorsField.append($("<li>").addClass("new-post-form-error").html(error)).show());
          }
          return _results;
        }
      };
    };

    DiscussionUtil.clearFormErrors = function(errorsField) {
      return errorsField.empty();
    };

    DiscussionUtil.postMathJaxProcessor = function(text) {
      var RE_DISPLAYMATH, RE_INLINEMATH;
      RE_INLINEMATH = /^\$([^\$]*)\$/g;
      RE_DISPLAYMATH = /^\$\$([^\$]*)\$\$/g;
      return this.processEachMathAndCode(text, function(s, type) {
        if (type === 'display') {
          return s.replace(RE_DISPLAYMATH, function($0, $1) {
            return "\\[" + $1 + "\\]";
          });
        } else if (type === 'inline') {
          return s.replace(RE_INLINEMATH, function($0, $1) {
            return "\\(" + $1 + "\\)";
          });
        } else {
          return s;
        }
      });
    };

    DiscussionUtil.makeWmdEditor = function($content, $local, cls_identifier) {
      var appended_id, editor, elem, id, imageUploadUrl, placeholder, _processor;
      elem = $local("." + cls_identifier);
      placeholder = elem.data('placeholder');
      id = elem.attr("data-id");
      appended_id = "-" + cls_identifier + "-" + id;
      imageUploadUrl = this.urlFor('upload');
      _processor = function(_this) {
        return function(text) {
          return _this.postMathJaxProcessor(text);
        };
      };
      editor = Markdown.makeWmdEditor(elem, appended_id, imageUploadUrl, _processor(this));
      this.wmdEditors["" + cls_identifier + "-" + id] = editor;
      if (placeholder != null) {
        elem.find("#wmd-input" + appended_id).attr('placeholder', placeholder);
      }
      return editor;
    };

    DiscussionUtil.getWmdEditor = function($content, $local, cls_identifier) {
      var elem, id;
      elem = $local("." + cls_identifier);
      id = elem.attr("data-id");
      return this.wmdEditors["" + cls_identifier + "-" + id];
    };

    DiscussionUtil.getWmdInput = function($content, $local, cls_identifier) {
      var elem, id;
      elem = $local("." + cls_identifier);
      id = elem.attr("data-id");
      return $local("#wmd-input-" + cls_identifier + "-" + id);
    };

    DiscussionUtil.getWmdContent = function($content, $local, cls_identifier) {
      return this.getWmdInput($content, $local, cls_identifier).val();
    };

    DiscussionUtil.setWmdContent = function($content, $local, cls_identifier, text) {
      this.getWmdInput($content, $local, cls_identifier).val(text);
      return this.getWmdEditor($content, $local, cls_identifier).refreshPreview();
    };

    DiscussionUtil.subscriptionLink = function(type, id) {
      var followLink, handleFollow, handleUnfollow, unfollowLink;
      followLink = function() {
        return this.generateDiscussionLink("discussion-follow-" + type, "Follow", handleFollow);
      };
      unfollowLink = function() {
        return this.generateDiscussionLink("discussion-unfollow-" + type, "Unfollow", handleUnfollow);
      };
      handleFollow = function(elem) {
        return this.safeAjax({
          $elem: $(elem),
          url: this.urlFor("follow_" + type, id),
          type: "POST",
          success: function(response, textStatus) {
            if (textStatus === "success") {
              return $(elem).replaceWith(unfollowLink());
            }
          },
          dataType: 'json'
        });
      };
      handleUnfollow = function(elem) {
        return this.safeAjax({
          $elem: $(elem),
          url: this.urlFor("unfollow_" + type, id),
          type: "POST",
          success: function(response, textStatus) {
            if (textStatus === "success") {
              return $(elem).replaceWith(followLink());
            }
          },
          dataType: 'json'
        });
      };
      if (this.isSubscribed(id, type)) {
        return unfollowLink();
      } else {
        return followLink();
      }
    };

    DiscussionUtil.processEachMathAndCode = function(text, processor) {
      var $div, ESCAPED_BACKSLASH, ESCAPED_DOLLAR, RE_DISPLAYMATH, RE_INLINEMATH, cnt, codeArchive, processedText;
      codeArchive = [];
      RE_DISPLAYMATH = /^([^\$]*?)\$\$([^\$]*?)\$\$(.*)$/m;
      RE_INLINEMATH = /^([^\$]*?)\$([^\$]+?)\$(.*)$/m;
      ESCAPED_DOLLAR = '@@ESCAPED_D@@';
      ESCAPED_BACKSLASH = '@@ESCAPED_B@@';
      processedText = "";
      $div = $("<div>").html(text);
      $div.find("code").each(function(index, code) {
        codeArchive.push($(code).html());
        return $(code).html(codeArchive.length - 1);
      });
      text = $div.html();
      text = text.replace(/\\\$/g, ESCAPED_DOLLAR);
      while (true) {
        if (RE_INLINEMATH.test(text)) {
          text = text.replace(RE_INLINEMATH, function($0, $1, $2, $3) {
            processedText += $1 + processor("$" + $2 + "$", 'inline');
            return $3;
          });
        } else if (RE_DISPLAYMATH.test(text)) {
          text = text.replace(RE_DISPLAYMATH, function($0, $1, $2, $3) {
            processedText = processor("$$" + $2 + "$$", 'display') + processedText;
            processedText = $1 + processedText;
            return $3;
          });
        } else {
          processedText += text;
          break;
        }
      }
      text = processedText;
      text = text.replace(new RegExp(ESCAPED_DOLLAR, 'g'), '\\$');
      text = text.replace(/\\\\\\\\/g, ESCAPED_BACKSLASH);
      text = text.replace(/\\begin\{([a-z]*\*?)\}([\s\S]*?)\\end\{\1\}/img, function($0, $1, $2) {
        return processor(("\\begin{" + $1 + "}") + $2 + ("\\end{" + $1 + "}"));
      });
      text = text.replace(new RegExp(ESCAPED_BACKSLASH, 'g'), '\\\\\\\\');
      $div = $("<div>").html(text);
      cnt = 0;
      $div.find("code").each(function(index, code) {
        $(code).html(processor(codeArchive[cnt], 'code'));
        return cnt += 1;
      });
      text = $div.html();
      return text;
    };

    DiscussionUtil.unescapeHighlightTag = function(text) {
      return text.replace(/\&lt\;highlight\&gt\;/g, "<span class='search-highlight'>").replace(/\&lt\;\/highlight\&gt\;/g, "</span>");
    };

    DiscussionUtil.stripHighlight = function(text) {
      return text.replace(/\&(amp\;)?lt\;highlight\&(amp\;)?gt\;/g, "").replace(/\&(amp\;)?lt\;\/highlight\&(amp\;)?gt\;/g, "");
    };

    DiscussionUtil.stripLatexHighlight = function(text) {
      return this.processEachMathAndCode(text, this.stripHighlight);
    };

    DiscussionUtil.markdownWithHighlight = function(text) {
      var converter;
      text = text.replace(/^\&gt\;/gm, ">");
      converter = Markdown.getMathCompatibleConverter();
      text = this.unescapeHighlightTag(this.stripLatexHighlight(converter.makeHtml(text)));
      return text.replace(/^>/gm, "&gt;");
    };

    DiscussionUtil.abbreviateString = function(text, minLength) {
      if (text.length < minLength) {
        return text;
      } else {
        while (minLength < text.length && text[minLength] !== ' ') {
          minLength++;
        }
        return text.substr(0, minLength) + '...';
      }
    };

    return DiscussionUtil;

  })();

}).call(this);
