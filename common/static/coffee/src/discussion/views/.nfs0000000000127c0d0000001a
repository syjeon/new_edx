// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionUserProfileView = (function(_super) {
      __extends(DiscussionUserProfileView, _super);

      function DiscussionUserProfileView() {
        this.addThread = __bind(this.addThread, this);
        this.renderThreads = __bind(this.renderThreads, this);
        _ref = DiscussionUserProfileView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      DiscussionUserProfileView.prototype.initialize = function(options) {
        return this.renderThreads(this.$el, this.collection);
      };

      DiscussionUserProfileView.prototype.renderThreads = function($elem, threads) {
        var $discussion;
        this.discussion = new Discussion();
        this.discussion.reset(threads, {
          silent: false
        });
        $discussion = $(Mustache.render($("script#_user_profile").html(), {
          'threads': threads
        }));
        $elem.append($discussion);
        this.threadviews = this.discussion.map(function(thread) {
          return new DiscussionThreadProfileView({
            el: this.$("article#thread_" + thread.id),
            model: thread
          });
        });
        return _.each(this.threadviews, function(dtv) {
          return dtv.render();
        });
      };

      DiscussionUserProfileView.prototype.addThread = function(thread, collection, options) {
        var article, threadView;
        article = $("<article class='discussion-thread' id='thread_" + thread.id + "'></article>");
        this.$('section.discussion > .threads').prepend(article);
        threadView = new DiscussionThreadInlineView({
          el: article,
          model: thread
        });
        threadView.render();
        return this.threadviews.unshift(threadView);
      };

      return DiscussionUserProfileView;

    })(Backbone.View);
  }

}).call(this);
