// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.ThreadResponseShowView = (function(_super) {
      __extends(ThreadResponseShowView, _super);

      function ThreadResponseShowView() {
        this.updateModelDetails = __bind(this.updateModelDetails, this);
        this.renderFlagged = __bind(this.renderFlagged, this);
        _ref = ThreadResponseShowView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      ThreadResponseShowView.prototype.events = {
        "click .vote-btn": "toggleVote",
        "click .action-endorse": "toggleEndorse",
        "click .action-delete": "_delete",
        "click .action-edit": "edit",
        "click .discussion-flag-abuse": "toggleFlagAbuse"
      };

      ThreadResponseShowView.prototype.$ = function(selector) {
        return this.$el.find(selector);
      };

      ThreadResponseShowView.prototype.initialize = function() {
        ThreadResponseShowView.__super__.initialize.call(this);
        return this.model.on("change", this.updateModelDetails);
      };

      ThreadResponseShowView.prototype.renderTemplate = function() {
        this.template = _.template($("#thread-response-show-template").html());
        return this.template(this.model.toJSON());
      };

      ThreadResponseShowView.prototype.render = function() {
        this.$el.html(this.renderTemplate());
        this.delegateEvents();
        if (window.user.voted(this.model)) {
          this.$(".vote-btn").addClass("is-cast");
        }
        this.renderAttrs();
        this.renderFlagged();
        this.$el.find(".posted-details").timeago();
        this.convertMath();
        this.markAsStaff();
        return this;
      };

      ThreadResponseShowView.prototype.convertMath = function() {
        var element;
        element = this.$(".response-body");
        element.html(DiscussionUtil.postMathJaxProcessor(DiscussionUtil.markdownWithHighlight(element.text())));
        return MathJax.Hub.Queue(["Typeset", MathJax.Hub, element[0]]);
      };

      ThreadResponseShowView.prototype.markAsStaff = function() {
        if (DiscussionUtil.isStaff(this.model.get("user_id"))) {
          this.$el.addClass("staff");
          return this.$el.prepend('<div class="staff-banner">staff</div>');
        } else if (DiscussionUtil.isTA(this.model.get("user_id"))) {
          this.$el.addClass("community-ta");
          return this.$el.prepend('<div class="community-ta-banner">Community TA</div>');
        }
      };

      ThreadResponseShowView.prototype.toggleVote = function(event) {
        event.preventDefault();
        this.$(".vote-btn").toggleClass("is-cast");
        if (this.$(".vote-btn").hasClass("is-cast")) {
          return this.vote();
        } else {
          return this.unvote();
        }
      };

      ThreadResponseShowView.prototype.vote = function() {
        var url,
          _this = this;
        url = this.model.urlFor("upvote");
        this.$(".votes-count-number").html(parseInt(this.$(".votes-count-number").html()) + 1);
        return DiscussionUtil.safeAjax({
          $elem: this.$(".discussion-vote"),
          url: url,
          type: "POST",
          success: function(response, textStatus) {
            if (textStatus === 'success') {
              return _this.model.set(response);
            }
          }
        });
      };

      ThreadResponseShowView.prototype.unvote = function() {
        var url,
          _this = this;
        url = this.model.urlFor("unvote");
        this.$(".votes-count-number").html(parseInt(this.$(".votes-count-number").html()) - 1);
        return DiscussionUtil.safeAjax({
          $elem: this.$(".discussion-vote"),
          url: url,
          type: "POST",
          success: function(response, textStatus) {
            if (textStatus === 'success') {
              return _this.model.set(response);
            }
          }
        });
      };

      ThreadResponseShowView.prototype.edit = function(event) {
        return this.trigger("response:edit", event);
      };

      ThreadResponseShowView.prototype._delete = function(event) {
        return this.trigger("response:_delete", event);
      };

      ThreadResponseShowView.prototype.toggleEndorse = function(event) {
        var $elem, data, endorsed, url;
        event.preventDefault();
        if (!this.model.can('can_endorse')) {
          return;
        }
        $elem = $(event.target);
        url = this.model.urlFor('endorse');
        endorsed = this.model.get('endorsed');
        data = {
          endorsed: !endorsed
        };
        this.model.set('endorsed', !endorsed);
        this.trigger("comment:endorse", !endorsed);
        return DiscussionUtil.safeAjax({
          $elem: $elem,
          url: url,
          data: data,
          type: "POST"
        });
      };

      ThreadResponseShowView.prototype.renderFlagged = function() {
        var _ref1;
        if ((_ref1 = window.user.id, __indexOf.call(this.model.get("abuse_flaggers"), _ref1) >= 0) || (DiscussionUtil.isFlagModerator && this.model.get("abuse_flaggers").length > 0)) {
          this.$("[data-role=thread-flag]").addClass("flagged");
          this.$("[data-role=thread-flag]").removeClass("notflagged");
          return this.$(".discussion-flag-abuse .flag-label").html("Misuse Reported");
        } else {
          this.$("[data-role=thread-flag]").removeClass("flagged");
          this.$("[data-role=thread-flag]").addClass("notflagged");
          return this.$(".discussion-flag-abuse .flag-label").html("Report Misuse");
        }
      };

      ThreadResponseShowView.prototype.updateModelDetails = function() {
        return this.renderFlagged();
      };

      return ThreadResponseShowView;

    })(DiscussionContentView);
  }

}).call(this);
