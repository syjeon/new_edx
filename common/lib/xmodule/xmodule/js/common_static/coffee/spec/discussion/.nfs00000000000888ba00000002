// Generated by CoffeeScript 1.6.3
(function() {
  describe('All Content', function() {
    beforeEach(function() {
      window.$$course_id = 'mitX/999/test';
      return window.user = new DiscussionUser({
        id: '567'
      });
    });
    describe('Content', function() {
      beforeEach(function() {
        return this.content = new Content({
          id: '01234567',
          user_id: '567',
          course_id: 'mitX/999/test',
          body: 'this is some content',
          abuse_flaggers: ['123']
        });
      });
      it('should exist', function() {
        return expect(Content).toBeDefined();
      });
      it('is initialized correctly', function() {
        this.content.initialize;
        expect(Content.contents['01234567']).toEqual(this.content);
        expect(this.content.get('id')).toEqual('01234567');
        expect(this.content.get('user_url')).toEqual('/courses/mitX/999/test/discussion/forum/users/567');
        expect(this.content.get('children')).toEqual([]);
        return expect(this.content.get('comments')).toEqual(jasmine.any(Comments));
      });
      it('can update info', function() {
        this.content.updateInfo({
          ability: 'can_endorse',
          voted: true,
          subscribed: true
        });
        expect(this.content.get('ability')).toEqual('can_endorse');
        expect(this.content.get('voted')).toEqual(true);
        return expect(this.content.get('subscribed')).toEqual(true);
      });
      it('can be flagged for abuse', function() {
        this.content.flagAbuse();
        return expect(this.content.get('abuse_flaggers')).toEqual(['123', '567']);
      });
      return it('can be unflagged for abuse', function() {
        var temp_array;
        temp_array = [];
        temp_array.push(window.user.get('id'));
        this.content.set("abuse_flaggers", temp_array);
        this.content.unflagAbuse();
        return expect(this.content.get('abuse_flaggers')).toEqual([]);
      });
    });
    return describe('Comments', function() {
      beforeEach(function() {
        this.comment1 = new Comment({
          id: '123'
        });
        return this.comment2 = new Comment({
          id: '345'
        });
      });
      it('can contain multiple comments', function() {
        var myComments;
        myComments = new Comments;
        expect(myComments.length).toEqual(0);
        myComments.add(this.comment1);
        expect(myComments.length).toEqual(1);
        myComments.add(this.comment2);
        return expect(myComments.length).toEqual(2);
      });
      return it('returns results to the find method', function() {
        var myComments;
        myComments = new Comments;
        myComments.add(this.comment1);
        return expect(myComments.find('123')).toBe(this.comment1);
      });
    });
  });

}).call(this);
