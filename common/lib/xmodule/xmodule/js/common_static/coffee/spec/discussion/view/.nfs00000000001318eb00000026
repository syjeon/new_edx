// Generated by CoffeeScript 1.6.3
(function() {
  describe("DiscussionContentView", function() {
    beforeEach(function() {
      setFixtures;
      "<div class=\"discussion-post\">\n    <header>\n        <a data-tooltip=\"vote\" data-role=\"discussion-vote\" class=\"vote-btn discussion-vote discussion-vote-up\" href=\"#\">\n        <span class=\"plus-icon\">+</span> <span class=\"votes-count-number\">0</span></a>\n        <h1>Post Title</h1>\n        <p class=\"posted-details\">\n            <a class=\"username\" href=\"/courses/MITx/999/Robot_Super_Course/discussion/forum/users/1\">robot</a>\n            <span title=\"2013-05-08T17:34:07Z\" class=\"timeago\">less than a minute ago</span>\n        </p>\n    </header>\n    <div class=\"post-body\"><p>Post body.</p></div>\n    <div data-tooltip=\"Report Misuse\" data-role=\"thread-flag\" class=\"discussion-flag-abuse notflagged\">\n    <i class=\"icon\"></i><span class=\"flag-label\">Report Misuse</span></div>\n    <div data-tooltip=\"pin this thread\" data-role=\"thread-pin\" class=\"admin-pin discussion-pin notpinned\">\n    <i class=\"icon\"></i><span class=\"pin-label\">Pin Thread</span></div>\n</div>";
      this.thread = new Thread({
        id: '01234567',
        user_id: '567',
        course_id: 'mitX/999/test',
        body: 'this is a thread',
        created_at: '2013-04-03T20:08:39Z',
        abuse_flaggers: ['123'],
        roles: []
      });
      return this.view = new DiscussionContentView({
        model: this.thread
      });
    });
    it('defines the tag', function() {
      expect($('#jasmine-fixtures')).toExist;
      expect(this.view.tagName).toBeDefined;
      return expect(this.view.el.tagName.toLowerCase()).toBe('div');
    });
    it("defines the class", function() {
      return expect(this.view.model).toBeDefined();
    });
    it('is tied to the model', function() {
      return expect(this.view.model).toBeDefined();
    });
    it('can be flagged for abuse', function() {
      this.thread.flagAbuse();
      return expect(this.thread.get('abuse_flaggers')).toEqual(['123', '567']);
    });
    return it('can be unflagged for abuse', function() {
      var temp_array;
      temp_array = [];
      temp_array.push(window.user.get('id'));
      this.thread.set("abuse_flaggers", temp_array);
      this.thread.unflagAbuse();
      return expect(this.thread.get('abuse_flaggers')).toEqual([]);
    });
  });

}).call(this);
