// Generated by CoffeeScript 1.6.3
(function() {
  var _ref, _ref1,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionThreadShowView = (function(_super) {
      __extends(DiscussionThreadShowView, _super);

      function DiscussionThreadShowView() {
        this.updateModelDetails = __bind(this.updateModelDetails, this);
        this.renderPinned = __bind(this.renderPinned, this);
        this.renderFlagged = __bind(this.renderFlagged, this);
        this.renderVoted = __bind(this.renderVoted, this);
        _ref = DiscussionThreadShowView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      DiscussionThreadShowView.prototype.events = {
        "click .discussion-vote": "toggleVote",
        "click .discussion-flag-abuse": "toggleFlagAbuse",
        "click .admin-pin": "togglePin",
        "click .action-follow": "toggleFollowing",
        "click .action-edit": "edit",
        "click .action-delete": "_delete",
        "click .action-openclose": "toggleClosed"
      };

      DiscussionThreadShowView.prototype.$ = function(selector) {
        return this.$el.find(selector);
      };

      DiscussionThreadShowView.prototype.initialize = function() {
        DiscussionThreadShowView.__super__.initialize.call(this);
        return this.model.on("change", this.updateModelDetails);
      };

      DiscussionThreadShowView.prototype.renderTemplate = function() {
        this.template = _.template($("#thread-show-template").html());
        return this.template(this.model.toJSON());
      };

      DiscussionThreadShowView.prototype.render = function() {
        this.$el.html(this.renderTemplate());
        this.delegateEvents();
        this.renderDogear();
        this.renderVoted();
        this.renderFlagged();
        this.renderPinned();
        this.renderAttrs();
        this.$("span.timeago").timeago();
        this.convertMath();
        this.highlight(this.$(".post-body"));
        this.highlight(this.$("h1,h3"));
        return this;
      };

      DiscussionThreadShowView.prototype.renderDogear = function() {
        if (window.user.following(this.model)) {
          return this.$(".dogear").addClass("is-followed");
        }
      };

      DiscussionThreadShowView.prototype.renderVoted = function() {
        if (window.user.voted(this.model)) {
          return this.$("[data-role=discussion-vote]").addClass("is-cast");
        } else {
          return this.$("[data-role=discussion-vote]").removeClass("is-cast");
        }
      };

      DiscussionThreadShowView.prototype.renderFlagged = function() {
        var _ref1;
        if ((_ref1 = window.user.id, __indexOf.call(this.model.get("abuse_flaggers"), _ref1) >= 0) || (DiscussionUtil.isFlagModerator && this.model.get("abuse_flaggers").length > 0)) {
          this.$("[data-role=thread-flag]").addClass("flagged");
          this.$("[data-role=thread-flag]").removeClass("notflagged");
          return this.$(".discussion-flag-abuse .flag-label").html("Misuse Reported");
        } else {
          this.$("[data-role=thread-flag]").removeClass("flagged");
          this.$("[data-role=thread-flag]").addClass("notflagged");
          return this.$(".discussion-flag-abuse .flag-label").html("Report Misuse");
        }
      };

      DiscussionThreadShowView.prototype.renderPinned = function() {
        if (this.model.get("pinned")) {
          this.$("[data-role=thread-pin]").addClass("pinned");
          this.$("[data-role=thread-pin]").removeClass("notpinned");
          return this.$(".discussion-pin .pin-label").html("Pinned");
        } else {
          this.$("[data-role=thread-pin]").removeClass("pinned");
          this.$("[data-role=thread-pin]").addClass("notpinned");
          return this.$(".discussion-pin .pin-label").html("Pin Thread");
        }
      };

      DiscussionThreadShowView.prototype.updateModelDetails = function() {
        this.renderVoted();
        this.renderFlagged();
        this.renderPinned();
        return this.$("[data-role=discussion-vote] .votes-count-number").html(this.model.get("votes")["up_count"]);
      };

      DiscussionThreadShowView.prototype.convertMath = function() {
        var element;
        element = this.$(".post-body");
        element.html(DiscussionUtil.postMathJaxProcessor(DiscussionUtil.markdownWithHighlight(element.text())));
        return MathJax.Hub.Queue(["Typeset", MathJax.Hub, element[0]]);
      };

      DiscussionThreadShowView.prototype.toggleVote = function(event) {
        event.preventDefault();
        if (window.user.voted(this.model)) {
          return this.unvote();
        } else {
          return this.vote();
        }
      };

      DiscussionThreadShowView.prototype.toggleFollowing = function(event) {
        var $elem, url;
        $elem = $(event.target);
        url = null;
        if (!this.model.get('subscribed')) {
          this.model.follow();
          url = this.model.urlFor("follow");
        } else {
          this.model.unfollow();
          url = this.model.urlFor("unfollow");
        }
        return DiscussionUtil.safeAjax({
          $elem: $elem,
          url: url,
          type: "POST"
        });
      };

      DiscussionThreadShowView.prototype.vote = function() {
        var url,
          _this = this;
        window.user.vote(this.model);
        url = this.model.urlFor("upvote");
        return DiscussionUtil.safeAjax({
          $elem: this.$(".discussion-vote"),
          url: url,
          type: "POST",
          success: function(response, textStatus) {
            if (textStatus === 'success') {
              return _this.model.set(response, {
                silent: true
              });
            }
          }
        });
      };

      DiscussionThreadShowView.prototype.unvote = function() {
        var url,
          _this = this;
        window.user.unvote(this.model);
        url = this.model.urlFor("unvote");
        return DiscussionUtil.safeAjax({
          $elem: this.$(".discussion-vote"),
          url: url,
          type: "POST",
          success: function(response, textStatus) {
            if (textStatus === 'success') {
              return _this.model.set(response, {
                silent: true
              });
            }
          }
        });
      };

      DiscussionThreadShowView.prototype.edit = function(event) {
        return this.trigger("thread:edit", event);
      };

      DiscussionThreadShowView.prototype._delete = function(event) {
        return this.trigger("thread:_delete", event);
      };

      DiscussionThreadShowView.prototype.togglePin = function(event) {
        event.preventDefault();
        if (this.model.get('pinned')) {
          return this.unPin();
        } else {
          return this.pin();
        }
      };

      DiscussionThreadShowView.prototype.pin = function() {
        var url,
          _this = this;
        url = this.model.urlFor("pinThread");
        return DiscussionUtil.safeAjax({
          $elem: this.$(".discussion-pin"),
          url: url,
          type: "POST",
          success: function(response, textStatus) {
            if (textStatus === 'success') {
              return _this.model.set('pinned', true);
            }
          },
          error: function() {
            return $('.admin-pin').text("Pinning not currently available");
          }
        });
      };

      DiscussionThreadShowView.prototype.unPin = function() {
        var url,
          _this = this;
        url = this.model.urlFor("unPinThread");
        return DiscussionUtil.safeAjax({
          $elem: this.$(".discussion-pin"),
          url: url,
          type: "POST",
          success: function(response, textStatus) {
            if (textStatus === 'success') {
              return _this.model.set('pinned', false);
            }
          }
        });
      };

      DiscussionThreadShowView.prototype.toggleClosed = function(event) {
        var $elem, closed, data, url,
          _this = this;
        $elem = $(event.target);
        url = this.model.urlFor('close');
        closed = this.model.get('closed');
        data = {
          closed: !closed
        };
        return DiscussionUtil.safeAjax({
          $elem: $elem,
          url: url,
          data: data,
          type: "POST",
          success: function(response, textStatus) {
            _this.model.set('closed', !closed);
            return _this.model.set('ability', response.ability);
          }
        });
      };

      DiscussionThreadShowView.prototype.toggleEndorse = function(event) {
        var $elem, data, endorsed, url,
          _this = this;
        $elem = $(event.target);
        url = this.model.urlFor('endorse');
        endorsed = this.model.get('endorsed');
        data = {
          endorsed: !endorsed
        };
        return DiscussionUtil.safeAjax({
          $elem: $elem,
          url: url,
          data: data,
          type: "POST",
          success: function(response, textStatus) {
            return _this.model.set('endorsed', !endorsed);
          }
        });
      };

      DiscussionThreadShowView.prototype.highlight = function(el) {
        if (el.html()) {
          return el.html(el.html().replace(/&lt;mark&gt;/g, "<mark>").replace(/&lt;\/mark&gt;/g, "</mark>"));
        }
      };

      return DiscussionThreadShowView;

    })(DiscussionContentView);
    this.DiscussionThreadInlineShowView = (function(_super) {
      __extends(DiscussionThreadInlineShowView, _super);

      function DiscussionThreadInlineShowView() {
        _ref1 = DiscussionThreadInlineShowView.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      DiscussionThreadInlineShowView.prototype.renderTemplate = function() {
        var params;
        this.template = DiscussionUtil.getTemplate('_inline_thread_show');
        params = this.model.toJSON();
        if (this.model.get('username') != null) {
          params = $.extend(params, {
            user: {
              username: this.model.username,
              user_url: this.model.user_url
            }
          });
        }
        return Mustache.render(this.template, params);
      };

      return DiscussionThreadInlineShowView;

    })(DiscussionThreadShowView);
  }

}).call(this);
