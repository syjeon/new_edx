// Generated by CoffeeScript 1.6.3
(function() {
  var StudentAdmin, confirm_then, create_task_list_table, find_and_assert, load_IntervalManager, plantInterval, plantTimeout, std_ajax_err,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  plantTimeout = function() {
    return window.InstructorDashboard.util.plantTimeout.apply(this, arguments);
  };

  plantInterval = function() {
    return window.InstructorDashboard.util.plantInterval.apply(this, arguments);
  };

  std_ajax_err = function() {
    return window.InstructorDashboard.util.std_ajax_err.apply(this, arguments);
  };

  load_IntervalManager = function() {
    return window.InstructorDashboard.util.IntervalManager;
  };

  confirm_then = function(_arg) {
    var cancel, msg, ok;
    msg = _arg.msg, ok = _arg.ok, cancel = _arg.cancel;
    if (window.confirm(msg)) {
      return typeof ok === "function" ? ok() : void 0;
    } else {
      return typeof cancel === "function" ? cancel() : void 0;
    }
  };

  find_and_assert = function($root, selector) {
    var item;
    item = $root.find(selector);
    if (item.length !== 1) {
      console.error("element selection failed for '" + selector + "' resulted in length " + item.length);
      throw "Failed Element Selection";
    } else {
      return item;
    }
  };

  create_task_list_table = function($table_tasks, tasks_data) {
    var $table_placeholder, columns, grid, options, table_data;
    $table_tasks.empty();
    options = {
      enableCellNavigation: true,
      enableColumnReorder: false,
      autoHeight: true,
      rowHeight: 60,
      forceFitColumns: true
    };
    columns = [
      {
        id: 'task_type',
        field: 'task_type',
        name: 'Task Type'
      }, {
        id: 'requester',
        field: 'requester',
        name: 'Requester',
        width: 30
      }, {
        id: 'task_input',
        field: 'task_input',
        name: 'Input'
      }, {
        id: 'task_state',
        field: 'task_state',
        name: 'State',
        width: 30
      }, {
        id: 'task_id',
        field: 'task_id',
        name: 'Task ID',
        width: 50
      }, {
        id: 'created',
        field: 'created',
        name: 'Created'
      }
    ];
    table_data = tasks_data;
    $table_placeholder = $('<div/>', {
      "class": 'slickgrid'
    });
    $table_tasks.append($table_placeholder);
    return grid = new Slick.Grid($table_placeholder, table_data, columns, options);
  };

  StudentAdmin = (function() {
    function StudentAdmin($section) {
      var TASK_LIST_POLL_INTERVAL,
        _this = this;
      this.$section = $section;
      this.reload_running_tasks_list = __bind(this.reload_running_tasks_list, this);
      this.$section.data('wrapper', this);
      this.$field_student_select = find_and_assert(this.$section, "input[name='student-select']");
      this.$progress_link = find_and_assert(this.$section, "a.progress-link");
      this.$btn_enroll = find_and_assert(this.$section, "input[name='enroll']");
      this.$btn_unenroll = find_and_assert(this.$section, "input[name='unenroll']");
      this.$field_problem_select_single = find_and_assert(this.$section, "input[name='problem-select-single']");
      this.$btn_reset_attempts_single = find_and_assert(this.$section, "input[name='reset-attempts-single']");
      this.$btn_delete_state_single = this.$section.find("input[name='delete-state-single']");
      this.$btn_rescore_problem_single = this.$section.find("input[name='rescore-problem-single']");
      this.$btn_task_history_single = this.$section.find("input[name='task-history-single']");
      this.$table_task_history_single = this.$section.find(".task-history-single-table");
      this.$field_problem_select_all = this.$section.find("input[name='problem-select-all']");
      this.$btn_reset_attempts_all = this.$section.find("input[name='reset-attempts-all']");
      this.$btn_rescore_problem_all = this.$section.find("input[name='rescore-problem-all']");
      this.$btn_task_history_all = this.$section.find("input[name='task-history-all']");
      this.$table_task_history_all = this.$section.find(".task-history-all-table");
      this.$table_running_tasks = this.$section.find(".running-tasks-table");
      this.$request_response_error_single = find_and_assert(this.$section, ".student-specific-container .request-response-error");
      this.$request_response_error_all = this.$section.find(".course-specific-container .request-response-error");
      if (this.$table_running_tasks.length > 0) {
        TASK_LIST_POLL_INTERVAL = 20000;
        this.reload_running_tasks_list();
        this.task_poller = new (load_IntervalManager())(TASK_LIST_POLL_INTERVAL, function() {
          return _this.reload_running_tasks_list();
        });
      }
      this.$progress_link.click(function(e) {
        var email;
        e.preventDefault();
        email = _this.$field_student_select.val();
        return $.ajax({
          dataType: 'json',
          url: _this.$progress_link.data('endpoint'),
          data: {
            student_email: email
          },
          success: _this.clear_errors_then(function(data) {
            return window.location = data.progress_url;
          }),
          error: std_ajax_err(function() {
            return _this.$request_response_error_single.text("Error getting student progress url for '" + email + "'.");
          })
        });
      });
      this.$btn_enroll.click(function() {
        var send_data;
        send_data = {
          action: 'enroll',
          emails: _this.$field_student_select.val(),
          auto_enroll: false
        };
        return $.ajax({
          dataType: 'json',
          url: _this.$btn_enroll.data('endpoint'),
          data: send_data,
          success: _this.clear_errors_then(function() {
            return console.log("student " + send_data.emails + " enrolled");
          }),
          error: std_ajax_err(function() {
            return _this.$request_response_error_single.text("Error enrolling student '" + send_data.emails + "'.");
          })
        });
      });
      this.$btn_unenroll.click(function() {
        var send_data;
        send_data = {
          action: 'unenroll',
          emails: _this.$field_student_select.val()
        };
        return $.ajax({
          dataType: 'json',
          url: _this.$btn_unenroll.data('endpoint'),
          data: send_data,
          success: _this.clear_errors_then(function() {
            return console.log("student " + send_data.emails + " unenrolled");
          }),
          error: std_ajax_err(function() {
            return _this.$request_response_error_single.text("Error unenrolling student '" + send_data.emails + "'.");
          })
        });
      });
      this.$btn_reset_attempts_single.click(function() {
        var send_data;
        send_data = {
          student_email: _this.$field_student_select.val(),
          problem_to_reset: _this.$field_problem_select_single.val(),
          delete_module: false
        };
        return $.ajax({
          dataType: 'json',
          url: _this.$btn_reset_attempts_single.data('endpoint'),
          data: send_data,
          success: _this.clear_errors_then(function() {
            return console.log('problem attempts reset');
          }),
          error: std_ajax_err(function() {
            return _this.$request_response_error_single.text("Error resetting problem attempts.");
          })
        });
      });
      this.$btn_delete_state_single.click(function() {
        return confirm_then({
          msg: "Delete student '" + (_this.$field_student_select.val()) + "'s state on problem '" + (_this.$field_problem_select_single.val()) + "'?",
          ok: function() {
            var send_data;
            send_data = {
              student_email: _this.$field_student_select.val(),
              problem_to_reset: _this.$field_problem_select_single.val(),
              delete_module: true
            };
            return $.ajax({
              dataType: 'json',
              url: _this.$btn_delete_state_single.data('endpoint'),
              data: send_data,
              success: _this.clear_errors_then(function() {
                return console.log('module state deleted');
              }),
              error: std_ajax_err(function() {
                return _this.$request_response_error_single.text("Error deleting problem state.");
              })
            });
          }
        });
      });
      this.$btn_rescore_problem_single.click(function() {
        var send_data;
        send_data = {
          student_email: _this.$field_student_select.val(),
          problem_to_reset: _this.$field_problem_select_single.val()
        };
        return $.ajax({
          dataType: 'json',
          url: _this.$btn_rescore_problem_single.data('endpoint'),
          data: send_data,
          success: _this.clear_errors_then(function() {
            return console.log('started rescore problem task');
          }),
          error: std_ajax_err(function() {
            return _this.$request_response_error_single.text("Error starting a task to rescore student's problem.");
          })
        });
      });
      this.$btn_task_history_single.click(function() {
        var send_data;
        send_data = {
          student_email: _this.$field_student_select.val(),
          problem_urlname: _this.$field_problem_select_single.val()
        };
        if (!send_data.student_email) {
          return _this.$request_response_error_single.text("Enter a student email.");
        }
        if (!send_data.problem_urlname) {
          return _this.$request_response_error_single.text("Enter a problem urlname.");
        }
        return $.ajax({
          dataType: 'json',
          url: _this.$btn_task_history_single.data('endpoint'),
          data: send_data,
          success: _this.clear_errors_then(function(data) {
            return create_task_list_table(_this.$table_task_history_single, data.tasks);
          }),
          error: std_ajax_err(function() {
            return _this.$request_response_error_single.text("Error getting task history for student+problem");
          })
        });
      });
      this.$btn_reset_attempts_all.click(function() {
        return confirm_then({
          msg: "Reset attempts for all students on problem '" + (_this.$field_problem_select_all.val()) + "'?",
          ok: function() {
            var send_data;
            send_data = {
              all_students: true,
              problem_to_reset: _this.$field_problem_select_all.val()
            };
            return $.ajax({
              dataType: 'json',
              url: _this.$btn_reset_attempts_all.data('endpoint'),
              data: send_data,
              success: _this.clear_errors_then(function() {
                return console.log('started reset attempts task');
              }),
              error: std_ajax_err(function() {
                return _this.$request_response_error_all.text("Error starting a task to reset attempts for all students on this problem.");
              })
            });
          }
        });
      });
      this.$btn_rescore_problem_all.click(function() {
        return confirm_then({
          msg: "Rescore problem '" + (_this.$field_problem_select_all.val()) + "' for all students?",
          ok: function() {
            var send_data;
            send_data = {
              all_students: true,
              problem_to_reset: _this.$field_problem_select_all.val()
            };
            return $.ajax({
              dataType: 'json',
              url: _this.$btn_rescore_problem_all.data('endpoint'),
              data: send_data,
              success: _this.clear_errors_then(function() {
                return console.log('started rescore problem task');
              }),
              error: std_ajax_err(function() {
                return _this.$request_response_error_all.text("Error starting a task to rescore this problem for all students.");
              })
            });
          }
        });
      });
      this.$btn_task_history_all.click(function() {
        var send_data;
        send_data = {
          problem_urlname: _this.$field_problem_select_all.val()
        };
        if (!send_data.problem_urlname) {
          return _this.$request_response_error_all.text("Enter a problem urlname.");
        }
        return $.ajax({
          dataType: 'json',
          url: _this.$btn_task_history_all.data('endpoint'),
          data: send_data,
          success: _this.clear_errors_then(function(data) {
            return create_task_list_table(_this.$table_task_history_all, data.tasks);
          }),
          error: std_ajax_err(function() {
            return _this.$request_response_error_all.text("Error listing task history for this student and problem.");
          })
        });
      });
    }

    StudentAdmin.prototype.reload_running_tasks_list = function() {
      var list_endpoint,
        _this = this;
      list_endpoint = this.$table_running_tasks.data('endpoint');
      return $.ajax({
        dataType: 'json',
        url: list_endpoint,
        success: function(data) {
          return create_task_list_table(_this.$table_running_tasks, data.tasks);
        },
        error: std_ajax_err(function() {
          return console.warn("error listing all instructor tasks");
        })
      });
    };

    StudentAdmin.prototype.clear_errors_then = function(cb) {
      this.$request_response_error_single.empty();
      this.$request_response_error_all.empty();
      return function() {
        return cb != null ? cb.apply(this, arguments) : void 0;
      };
    };

    StudentAdmin.prototype.onClickTitle = function() {
      var _ref;
      return (_ref = this.task_poller) != null ? _ref.start() : void 0;
    };

    StudentAdmin.prototype.onExit = function() {
      var _ref;
      return (_ref = this.task_poller) != null ? _ref.stop() : void 0;
    };

    return StudentAdmin;

  })();

  if (typeof _ !== "undefined" && _ !== null) {
    _.defaults(window, {
      InstructorDashboard: {}
    });
    _.defaults(window.InstructorDashboard, {
      sections: {}
    });
    _.defaults(window.InstructorDashboard.sections, {
      StudentAdmin: StudentAdmin
    });
  }

}).call(this);
