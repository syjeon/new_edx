// Generated by CoffeeScript 1.6.3
(function() {
  var AuthList, AuthListWidget, BatchEnrollment, MemberListWidget, Membership, plantTimeout, std_ajax_err,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  plantTimeout = function() {
    return window.InstructorDashboard.util.plantTimeout.apply(this, arguments);
  };

  std_ajax_err = function() {
    return window.InstructorDashboard.util.std_ajax_err.apply(this, arguments);
  };

  MemberListWidget = (function() {
    function MemberListWidget($container, params) {
      var template_html,
        _this = this;
      this.$container = $container;
      if (params == null) {
        params = {};
      }
      params = _.defaults(params, {
        title: "Member List",
        info: "Use this list to manage members.",
        labels: ["field1", "field2", "field3"],
        add_placeholder: "Enter name",
        add_btn_label: "Add Member",
        add_handler: function(input) {}
      });
      template_html = $("#member-list-widget-template").html();
      this.$container.html(Mustache.render(template_html, params));
      this.$('.info-badge').click(function() {
        return _this.toggle_info();
      });
      this.$('input[type="button"].add').click(function() {
        return typeof params.add_handler === "function" ? params.add_handler(_this.$('.add-field').val()) : void 0;
      });
    }

    MemberListWidget.prototype.show_info = function() {
      this.$('.info').show();
      return this.$('.member-list').hide();
    };

    MemberListWidget.prototype.show_list = function() {
      this.$('.info').hide();
      return this.$('.member-list').show();
    };

    MemberListWidget.prototype.toggle_info = function() {
      this.$('.info').toggle();
      return this.$('.member-list').toggle();
    };

    MemberListWidget.prototype.clear_input = function() {
      return this.$('.add-field').val('');
    };

    MemberListWidget.prototype.clear_rows = function() {
      return this.$('table tbody').empty();
    };

    MemberListWidget.prototype.add_row = function(row_array) {
      var $tbody, $td, $tr, item, _i, _len;
      $tbody = this.$('table tbody');
      $tr = $('<tr>');
      for (_i = 0, _len = row_array.length; _i < _len; _i++) {
        item = row_array[_i];
        $td = $('<td>');
        if (item instanceof jQuery) {
          $td.append(item);
        } else {
          $td.text(item);
        }
        $tr.append($td);
      }
      return $tbody.append($tr);
    };

    MemberListWidget.prototype.$ = function(selector) {
      var s;
      if (this.debug != null) {
        s = this.$container.find(selector);
        if ((s != null ? s.length : void 0) !== 1) {
          console.warn("local selector '" + selector + "' found (" + s.length + ") results");
        }
        return s;
      } else {
        return this.$container.find(selector);
      }
    };

    return MemberListWidget;

  })();

  AuthListWidget = (function(_super) {
    __extends(AuthListWidget, _super);

    function AuthListWidget($container, rolename, $error_section) {
      var _this = this;
      this.rolename = rolename;
      this.$error_section = $error_section;
      AuthListWidget.__super__.constructor.call(this, $container, {
        title: $container.data('display-name'),
        info: $container.data('info-text'),
        labels: ["username", "email", "revoke access"],
        add_placeholder: "Enter email",
        add_btn_label: $container.data('add-button-label'),
        add_handler: function(input) {
          return _this.add_handler(input);
        }
      });
      this.debug = true;
      this.list_endpoint = $container.data('list-endpoint');
      this.modify_endpoint = $container.data('modify-endpoint');
      if (this.rolename == null) {
        throw "AuthListWidget missing @rolename";
      }
      this.reload_list();
    }

    AuthListWidget.prototype.re_view = function() {
      this.clear_errors();
      this.clear_input();
      this.reload_list();
      this.$('.info').hide();
      return this.$('.member-list').show();
    };

    AuthListWidget.prototype.add_handler = function(input) {
      var _this = this;
      if ((input != null) && input !== '') {
        return this.modify_member_access(input, 'allow', function(error) {
          if (error !== null) {
            return _this.show_errors(error);
          }
          _this.clear_errors();
          _this.clear_input();
          return _this.reload_list();
        });
      } else {
        return this.show_errors("Enter an email.");
      }
    };

    AuthListWidget.prototype.reload_list = function() {
      var _this = this;
      return this.get_member_list(function(error, member_list) {
        if (error !== null) {
          return _this.show_errors(error);
        }
        _this.clear_rows();
        _this.show_info();
        return _.each(member_list, function(member) {
          var $revoke_btn;
          $revoke_btn = $('<div/>', {
            "class": 'revoke',
            click: function() {
              return _this.modify_member_access(member.email, 'revoke', function(error) {
                if (error !== null) {
                  return _this.show_errors(error);
                }
                _this.clear_errors();
                return _this.reload_list();
              });
            }
          });
          _this.add_row([member.username, member.email, $revoke_btn]);
          return _this.show_list();
        });
      });
    };

    AuthListWidget.prototype.clear_errors = function() {
      var _ref;
      return (_ref = this.$error_section) != null ? _ref.text('') : void 0;
    };

    AuthListWidget.prototype.show_errors = function(msg) {
      var _ref;
      return (_ref = this.$error_section) != null ? _ref.text(msg) : void 0;
    };

    AuthListWidget.prototype.get_member_list = function(cb) {
      var _this = this;
      return $.ajax({
        dataType: 'json',
        url: this.list_endpoint,
        data: {
          rolename: this.rolename
        },
        success: function(data) {
          return typeof cb === "function" ? cb(null, data[_this.rolename]) : void 0;
        },
        error: std_ajax_err(function() {
          return typeof cb === "function" ? cb("Error fetching list for role '" + _this.rolename + "'") : void 0;
        })
      });
    };

    AuthListWidget.prototype.modify_member_access = function(email, action, cb) {
      var _this = this;
      return $.ajax({
        dataType: 'json',
        url: this.modify_endpoint,
        data: {
          email: email,
          rolename: this.rolename,
          action: action
        },
        success: function(data) {
          return typeof cb === "function" ? cb(null, data) : void 0;
        },
        error: std_ajax_err(function() {
          return typeof cb === "function" ? cb("Error changing user's permissions.") : void 0;
        })
      });
    };

    return AuthListWidget;

  })(MemberListWidget);

  BatchEnrollment = (function() {
    function BatchEnrollment($container) {
      var _this = this;
      this.$container = $container;
      this.$emails_input = this.$container.find("textarea[name='student-emails']'");
      this.$btn_enroll = this.$container.find("input[name='enroll']'");
      this.$btn_unenroll = this.$container.find("input[name='unenroll']'");
      this.$checkbox_autoenroll = this.$container.find("input[name='auto-enroll']'");
      this.$task_response = this.$container.find(".request-response");
      this.$request_response_error = this.$container.find(".request-response-error");
      this.$btn_enroll.click(function() {
        var send_data;
        send_data = {
          action: 'enroll',
          emails: _this.$emails_input.val(),
          auto_enroll: _this.$checkbox_autoenroll.is(':checked')
        };
        return $.ajax({
          dataType: 'json',
          url: _this.$btn_enroll.data('endpoint'),
          data: send_data,
          success: function(data) {
            return _this.display_response(data);
          },
          error: std_ajax_err(function() {
            return _this.fail_with_error("Error enrolling/unenrolling students.");
          })
        });
      });
      this.$btn_unenroll.click(function() {
        var send_data;
        send_data = {
          action: 'unenroll',
          emails: _this.$emails_input.val(),
          auto_enroll: _this.$checkbox_autoenroll.is(':checked')
        };
        return $.ajax({
          dataType: 'json',
          url: _this.$btn_unenroll.data('endpoint'),
          data: send_data,
          success: function(data) {
            return _this.display_response(data);
          },
          error: std_ajax_err(function() {
            return _this.fail_with_error("Error enrolling/unenrolling students.");
          })
        });
      });
    }

    BatchEnrollment.prototype.fail_with_error = function(msg) {
      console.warn(msg);
      this.$task_response.empty();
      this.$request_response_error.empty();
      return this.$request_response_error.text(msg);
    };

    BatchEnrollment.prototype.display_response = function(data_from_server) {
      var allowed, autoenrolled, enrolled, errors, errors_label, notenrolled, render_list, sr, student_results, _i, _j, _len, _len1, _ref,
        _this = this;
      this.$task_response.empty();
      this.$request_response_error.empty();
      errors = [];
      enrolled = [];
      allowed = [];
      autoenrolled = [];
      notenrolled = [];
      _ref = data_from_server.results;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        student_results = _ref[_i];
        if (student_results.error) {
          errors.push(student_results);
        } else if (student_results.after.enrollment) {
          enrolled.push(student_results);
        } else if (student_results.after.allowed) {
          if (student_results.after.auto_enroll) {
            autoenrolled.push(student_results);
          } else {
            allowed.push(student_results);
          }
        } else if (!student_results.after.enrollment) {
          notenrolled.push(student_results);
        } else {
          console.warn('student results not reported to user');
          console.warn(student_results);
        }
      }
      render_list = function(label, emails) {
        var email, email_list, task_res_section, _j, _len1;
        task_res_section = $('<div/>', {
          "class": 'request-res-section'
        });
        task_res_section.append($('<h3/>', {
          text: label
        }));
        email_list = $('<ul/>');
        task_res_section.append(email_list);
        for (_j = 0, _len1 = emails.length; _j < _len1; _j++) {
          email = emails[_j];
          email_list.append($('<li/>', {
            text: email
          }));
        }
        return _this.$task_response.append(task_res_section);
      };
      if (errors.length) {
        errors_label = (function() {
          if (data_from_server.action === 'enroll') {
            return "There was an error enrolling:";
          } else if (data_from_server.action === 'unenroll') {
            return "There was an error unenrolling:";
          } else {
            console.warn("unknown action from server '" + data_from_server.action + "'");
            return "There was an error processing:";
          }
        })();
        for (_j = 0, _len1 = errors.length; _j < _len1; _j++) {
          student_results = errors[_j];
          render_list(errors_label, (function() {
            var _k, _len2, _results;
            _results = [];
            for (_k = 0, _len2 = errors.length; _k < _len2; _k++) {
              sr = errors[_k];
              _results.push(sr.email);
            }
            return _results;
          })());
        }
      }
      if (enrolled.length) {
        render_list("Students Enrolled:", (function() {
          var _k, _len2, _results;
          _results = [];
          for (_k = 0, _len2 = enrolled.length; _k < _len2; _k++) {
            sr = enrolled[_k];
            _results.push(sr.email);
          }
          return _results;
        })());
      }
      if (allowed.length) {
        render_list("These students will be allowed to enroll once they register:", (function() {
          var _k, _len2, _results;
          _results = [];
          for (_k = 0, _len2 = allowed.length; _k < _len2; _k++) {
            sr = allowed[_k];
            _results.push(sr.email);
          }
          return _results;
        })());
      }
      if (autoenrolled.length) {
        render_list("These students will be enrolled once they register:", (function() {
          var _k, _len2, _results;
          _results = [];
          for (_k = 0, _len2 = autoenrolled.length; _k < _len2; _k++) {
            sr = autoenrolled[_k];
            _results.push(sr.email);
          }
          return _results;
        })());
      }
      if (notenrolled.length) {
        return render_list("These students are now not enrolled:", (function() {
          var _k, _len2, _results;
          _results = [];
          for (_k = 0, _len2 = notenrolled.length; _k < _len2; _k++) {
            sr = notenrolled[_k];
            _results.push(sr.email);
          }
          return _results;
        })());
      }
    };

    return BatchEnrollment;

  })();

  AuthList = (function() {
    function AuthList($container, rolename) {
      var _this = this;
      this.$container = $container;
      this.rolename = rolename;
      this.$display_table = this.$container.find('.auth-list-table');
      this.$request_response_error = this.$container.find('.request-response-error');
      this.$add_section = this.$container.find('.auth-list-add');
      this.$allow_field = this.$add_section.find("input[name='email']");
      this.$allow_button = this.$add_section.find("input[name='allow']");
      this.$allow_button.click(function() {
        _this.access_change(_this.$allow_field.val(), 'allow', function() {
          return _this.reload_auth_list();
        });
        return _this.$allow_field.val('');
      });
      this.reload_auth_list();
    }

    AuthList.prototype.reload_auth_list = function() {
      var load_auth_list,
        _this = this;
      load_auth_list = function(data) {
        var $table_placeholder, WHICH_CELL_IS_REVOKE, columns, grid, options, table_data;
        _this.$request_response_error.empty();
        _this.$display_table.empty();
        options = {
          enableCellNavigation: true,
          enableColumnReorder: false,
          forceFitColumns: true
        };
        WHICH_CELL_IS_REVOKE = 3;
        columns = [
          {
            id: 'username',
            field: 'username',
            name: 'Username'
          }, {
            id: 'email',
            field: 'email',
            name: 'Email'
          }, {
            id: 'first_name',
            field: 'first_name',
            name: 'First Name'
          }, {
            id: 'revoke',
            field: 'revoke',
            name: 'Revoke',
            formatter: function(row, cell, value, columnDef, dataContext) {
              return "<span class='revoke-link'>Revoke Access</span>";
            }
          }
        ];
        table_data = data[_this.rolename];
        $table_placeholder = $('<div/>', {
          "class": 'slickgrid'
        });
        _this.$display_table.append($table_placeholder);
        grid = new Slick.Grid($table_placeholder, table_data, columns, options);
        return grid.onClick.subscribe(function(e, args) {
          var item;
          item = args.grid.getDataItem(args.row);
          if (args.cell === WHICH_CELL_IS_REVOKE) {
            return _this.access_change(item.email, 'revoke', function() {
              return _this.reload_auth_list();
            });
          }
        });
      };
      return $.ajax({
        dataType: 'json',
        url: this.$display_table.data('endpoint'),
        data: {
          rolename: this.rolename
        },
        success: load_auth_list,
        error: std_ajax_err(function() {
          return _this.$request_response_error.text("Error fetching list for '" + _this.rolename + "'");
        })
      });
    };

    AuthList.prototype.refresh = function() {
      this.$display_table.empty();
      return this.reload_auth_list();
    };

    AuthList.prototype.access_change = function(email, action, cb) {
      var _this = this;
      return $.ajax({
        dataType: 'json',
        url: this.$add_section.data('endpoint'),
        data: {
          email: email,
          rolename: this.rolename,
          action: action
        },
        success: function(data) {
          return typeof cb === "function" ? cb(data) : void 0;
        },
        error: std_ajax_err(function() {
          return _this.$request_response_error.text("Error changing user's permissions.");
        })
      });
    };

    return AuthList;

  })();

  Membership = (function() {
    function Membership($section) {
      var auth_list, _i, _len, _ref,
        _this = this;
      this.$section = $section;
      this.$section.data('wrapper', this);
      plantTimeout(0, function() {
        return new BatchEnrollment(_this.$section.find('.batch-enrollment'));
      });
      this.$list_selector = this.$section.find('select#member-lists-selector');
      this.$auth_list_containers = this.$section.find('.auth-list-container');
      this.$auth_list_errors = this.$section.find('.member-lists-management .request-response-error');
      this.auth_lists = _.map(this.$auth_list_containers, function(auth_list_container) {
        var rolename;
        rolename = $(auth_list_container).data('rolename');
        return new AuthListWidget($(auth_list_container), rolename, _this.$auth_list_errors);
      });
      this.$list_selector.empty();
      _ref = this.auth_lists;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        auth_list = _ref[_i];
        this.$list_selector.append($('<option/>', {
          text: auth_list.$container.data('display-name'),
          data: {
            auth_list: auth_list
          }
        }));
      }
      if (this.auth_lists.length === 0) {
        this.$list_selector.hide();
      }
      this.$list_selector.change(function() {
        var $opt, _j, _len1, _ref1;
        $opt = _this.$list_selector.children('option:selected');
        if (!($opt.length > 0)) {
          return;
        }
        _ref1 = _this.auth_lists;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          auth_list = _ref1[_j];
          auth_list.$container.removeClass('active');
        }
        auth_list = $opt.data('auth_list');
        auth_list.$container.addClass('active');
        return auth_list.re_view();
      });
      this.$list_selector.change();
    }

    Membership.prototype.onClickTitle = function() {};

    return Membership;

  })();

  if (typeof _ !== "undefined" && _ !== null) {
    _.defaults(window, {
      InstructorDashboard: {}
    });
    _.defaults(window.InstructorDashboard, {
      sections: {}
    });
    _.defaults(window.InstructorDashboard.sections, {
      Membership: Membership
    });
  }

}).call(this);
