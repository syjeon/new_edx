// Generated by CoffeeScript 1.6.3
(function() {
  var DataDownload, plantTimeout, std_ajax_err;

  plantTimeout = function() {
    return window.InstructorDashboard.util.plantTimeout.apply(this, arguments);
  };

  std_ajax_err = function() {
    return window.InstructorDashboard.util.std_ajax_err.apply(this, arguments);
  };

  DataDownload = (function() {
    function DataDownload($section) {
      var _this = this;
      this.$section = $section;
      this.$display = this.$section.find('.data-display');
      this.$display_text = this.$display.find('.data-display-text');
      this.$display_table = this.$display.find('.data-display-table');
      this.$request_response_error = this.$display.find('.request-response-error');
      this.$list_studs_btn = this.$section.find("input[name='list-profiles']'");
      this.$grade_config_btn = this.$section.find("input[name='dump-gradeconf']'");
      this.$list_studs_btn.click(function(e) {
        var url;
        url = _this.$list_studs_btn.data('endpoint');
        if ($(e.target).data('csv')) {
          url += '/csv';
          return location.href = url;
        } else {
          _this.clear_display();
          _this.$display_table.text('Loading...');
          return $.ajax({
            dataType: 'json',
            url: url,
            error: std_ajax_err(function() {
              _this.clear_display();
              return _this.$request_response_error.text("Error getting student list.");
            }),
            success: function(data) {
              var $table_placeholder, columns, feature, grid, grid_data, options;
              _this.clear_display();
              options = {
                enableCellNavigation: true,
                enableColumnReorder: false,
                forceFitColumns: true
              };
              columns = (function() {
                var _i, _len, _ref, _results;
                _ref = data.queried_features;
                _results = [];
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  feature = _ref[_i];
                  _results.push({
                    id: feature,
                    field: feature,
                    name: feature
                  });
                }
                return _results;
              })();
              grid_data = data.students;
              $table_placeholder = $('<div/>', {
                "class": 'slickgrid'
              });
              _this.$display_table.append($table_placeholder);
              return grid = new Slick.Grid($table_placeholder, grid_data, columns, options);
            }
          });
        }
      });
      this.$grade_config_btn.click(function(e) {
        var url;
        url = _this.$grade_config_btn.data('endpoint');
        return $.ajax({
          dataType: 'json',
          url: url,
          error: std_ajax_err(function() {
            _this.clear_display();
            return _this.$request_response_error.text("Error getting grading configuration.");
          }),
          success: function(data) {
            _this.clear_display();
            return _this.$display_text.html(data['grading_config_summary']);
          }
        });
      });
    }

    DataDownload.prototype.clear_display = function() {
      this.$display_text.empty();
      this.$display_table.empty();
      return this.$request_response_error.empty();
    };

    return DataDownload;

  })();

  if (typeof _ !== "undefined" && _ !== null) {
    _.defaults(window, {
      InstructorDashboard: {}
    });
    _.defaults(window.InstructorDashboard, {
      sections: {}
    });
    _.defaults(window.InstructorDashboard.sections, {
      DataDownload: DataDownload
    });
  }

}).call(this);
