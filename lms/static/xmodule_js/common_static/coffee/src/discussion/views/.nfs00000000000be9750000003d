// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.ResponseCommentShowView = (function(_super) {
      __extends(ResponseCommentShowView, _super);

      function ResponseCommentShowView() {
        this.updateModelDetails = __bind(this.updateModelDetails, this);
        this.renderFlagged = __bind(this.renderFlagged, this);
        _ref = ResponseCommentShowView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      ResponseCommentShowView.prototype.events = {
        "click .discussion-flag-abuse": "toggleFlagAbuse"
      };

      ResponseCommentShowView.prototype.tagName = "li";

      ResponseCommentShowView.prototype.initialize = function() {
        ResponseCommentShowView.__super__.initialize.call(this);
        return this.model.on("change", this.updateModelDetails);
      };

      ResponseCommentShowView.prototype.render = function() {
        var params;
        this.template = _.template($("#response-comment-show-template").html());
        params = this.model.toJSON();
        this.$el.html(this.template(params));
        this.initLocal();
        this.delegateEvents();
        this.renderAttrs();
        this.renderFlagged();
        this.markAsStaff();
        this.$el.find(".timeago").timeago();
        this.convertMath();
        this.addReplyLink();
        return this;
      };

      ResponseCommentShowView.prototype.addReplyLink = function() {
        var html, name, p, _ref1;
        if (this.model.hasOwnProperty('parent')) {
          name = (_ref1 = this.model.parent.get('username')) != null ? _ref1 : "anonymous";
          html = "<a href='#comment_" + this.model.parent.id + "'>@" + name + "</a>:  ";
          p = this.$('.response-body p:first');
          return p.prepend(html);
        }
      };

      ResponseCommentShowView.prototype.convertMath = function() {
        var body;
        body = this.$el.find(".response-body");
        body.html(DiscussionUtil.postMathJaxProcessor(DiscussionUtil.markdownWithHighlight(body.text())));
        return MathJax.Hub.Queue(["Typeset", MathJax.Hub, body[0]]);
      };

      ResponseCommentShowView.prototype.markAsStaff = function() {
        if (DiscussionUtil.isStaff(this.model.get("user_id"))) {
          return this.$el.find("a.profile-link").after('<span class="staff-label">staff</span>');
        } else if (DiscussionUtil.isTA(this.model.get("user_id"))) {
          return this.$el.find("a.profile-link").after('<span class="community-ta-label">Community&nbsp;&nbsp;TA</span>');
        }
      };

      ResponseCommentShowView.prototype.renderFlagged = function() {
        var _ref1;
        if ((_ref1 = window.user.id, __indexOf.call(this.model.get("abuse_flaggers"), _ref1) >= 0) || (DiscussionUtil.isFlagModerator && this.model.get("abuse_flaggers").length > 0)) {
          this.$("[data-role=thread-flag]").addClass("flagged");
          return this.$("[data-role=thread-flag]").removeClass("notflagged");
        } else {
          this.$("[data-role=thread-flag]").removeClass("flagged");
          return this.$("[data-role=thread-flag]").addClass("notflagged");
        }
      };

      ResponseCommentShowView.prototype.updateModelDetails = function() {
        return this.renderFlagged();
      };

      return ResponseCommentShowView;

    })(DiscussionContentView);
  }

}).call(this);
